 O Padrão de Codigo de barras mais utilizado em produtos de supermercado é o Padrão EAN13

 

Este padrão EAN13 serve para utilizar em embalagens de produtos comerciais. Atualmente este padrão é utilizado por mais de 80 países em todo o mundo.

 

Veja como o código é composto. Ele apresenta 13 dígitos que correspondem a quatro informações. São elas:

 

* Prefixo do país: os primeiros 3 dígitos;

* Código do fabricante: os próximos 4 dígitos;

* Código do produto: os próximos 5 dígitos;

* Dígito de controle: o último dígito.

7894900531008

*************
BANCO DE DADOS
*************

Produtos:
- ID (Chave primária)
- Nome do produto
- Quantidade em estoque
- Categoria
- Código de barras
- Data da compra

Categoria:
- ID
- Nome da Categoria

Usuarios:
- ID
- Nome
- Senha

*************
SNIPPETS
*************
=====
<div class="form-group">
    <div class="row">
        <div class="col-md-6 col-sm-6">
            <label for="product_name">Nome do produto</label>
            <input type="text" name="product_name" id="pruduct_name" class="form-control" placeholder="Nome do produto">
        </div>
        <div class="col-md-6 col-sm-6">
            <label for="category">Categoria</label>
            <select name="category" id="category" class="form-control">
            </select>
        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-4 col-sm-4">
            <label for="stock_quantity">Quantidade em estoque</label>
            <input type="text" name="stock_quantity" id="stock_quantity" class="form-control" placeholder="Exemplo: 3 pacotes">
        </div>
        <div class="col-md-4 col-sm-4">
            <label for="purchase_date">Data da compra</label>
            <input type="text" name="purchase_date" id="purchase_date" class="form-control" readonly>
        </div>
        <div class="col-md-4 col-sm-4">
            <label for="expiration_date">Data de validade</label>
            <input type="text" name="expiration_date" id="expiration_date" class="form-control" required>
        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-6 col-sm-6">
            <label for="trademark">Marca do produto</label>
            <input type="text" name="trademark" id="trademark" class="form-control">
        </div>
        <div class="col-md-6 col-sm-6">
            <label for="packing">Embalagem</label>
            <input type="text" name="packing" id="packing" class="form-control">
        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-6 col-sm-6">
            <label for="price">Preço</label>
            <input type="text" name="price" id="price" class="form-control">
        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-2 col-sm-2">
            <button type="submit" class="btn btn-default">Cadastrar produto</button>
        </div>
    </div>
</div>
=====

// Mascara para Data (dd/mm/aaaa)
function mascaraData(val) {
  var pass = val.value;
  var expr = /[0123456789]/;

  for (i = 0; i < pass.length; i++) {
    // charAt -> retorna o caractere posicionado no índice especificado
    var lchar = val.value.charAt(i);
    var nchar = val.value.charAt(i + 1);

    if (i == 0) {
      // search -> retorna um valor inteiro, indicando a posição do inicio da primeira
      // ocorrência de expReg dentro de instStr. Se nenhuma ocorrencia for encontrada o método retornara -1
      // instStr.search(expReg);
      if ((lchar.search(expr) != 0) || (lchar > 3)) {
        val.value = "";
      }

    } else if (i == 1) {

      if (lchar.search(expr) != 0) {
        // substring(indice1,indice2)
        // indice1, indice2 -> será usado para delimitar a string
        var tst1 = val.value.substring(0, (i));
        val.value = tst1;
        continue;
      }

      if ((nchar != '/') && (nchar != '')) {
        var tst1 = val.value.substring(0, (i) + 1);

        if (nchar.search(expr) != 0)
          var tst2 = val.value.substring(i + 2, pass.length);
        else
          var tst2 = val.value.substring(i + 1, pass.length);

        val.value = tst1 + '/' + tst2;
      }

    } else if (i == 4) {

      if (lchar.search(expr) != 0) {
        var tst1 = val.value.substring(0, (i));
        val.value = tst1;
        continue;
      }

      if ((nchar != '/') && (nchar != '')) {
        var tst1 = val.value.substring(0, (i) + 1);

        if (nchar.search(expr) != 0)
          var tst2 = val.value.substring(i + 2, pass.length);
        else
          var tst2 = val.value.substring(i + 1, pass.length);

        val.value = tst1 + '/' + tst2;
      }
    }

    if (i >= 6) {
      if (lchar.search(expr) != 0) {
        var tst1 = val.value.substring(0, (i));
        val.value = tst1;
      }
    }
  }

  if (pass.length > 10)
    val.value = val.value.substring(0, 10);
  return true;
}
=====

// Ajax (função de erro)
.fail(function(jqXHR, textStatus, errorThrown) {
    console.log("---- Erro ao pegar os dados de treinamento");
    console.error("---- jqXHR: " + jqXHR);
    console.error("---- textStatus: " + textStatus);
    console.error("---- errorThrown: " + errorThrown);
});
=====

// Páginação avançada via javascript
// Início da coleta de dados para o processo de paginação
var objDataPagination = new Object();

objDataPagination.pageLength = 25; // registros mostrados na página.
objDataPagination.page = 1; // página atual (começa na primeira, por isso 1).
objDataPagination.totalRecords = _this.arrTrainingMap.length; // total de registros
objDataPagination.totalPages = Math.ceil(objDataPagination.totalRecords / objDataPagination.pageLength); // faz-se a matemática para determinar, a partir do número de registros, quantas páginas terá no total.

// Caso já se tenha sido escolhido uma página, pega-se o valor desejado.
if (_this.params.get('pag') != null) {
    objDataPagination.page = parseInt(_this.params.get('pag'));
}

objDataPagination.offset = eval((objDataPagination.page * objDataPagination.pageLength) - objDataPagination.pageLength); // Determina o valor inicial da página atual
objDataPagination.maxValue = eval(objDataPagination.offset + objDataPagination.pageLength); // Determina o valor máximo dos registros que serão exibidos na página atual

// Caso o valor máximo seja maior que o número de registros, o maxValue será o próprio número de registros
if (objDataPagination.maxValue > training.values.length) {
    objDataPagination.maxValue = training.values.length;
}
// Termino da coleta de dados para paginação
=====

// Páginação simples via javascript
// Paginação
$(function () {
	var pageLength = 5; // registros mostrados na página.
	var page = 1; // página atual (começa na primeira, por isso 1).
	var totalRecords = training.values.length; // total de registros
	var totalPages = Math.ceil(totalRecords / pageLength); // faz-se a matemática para determinar, a partir do número de registros, quantas páginas terá no total.
	
	// Caso já se tenha sido escolhido uma página, pega-se o valor desejado.
	if (_this.params.get('pag') != null) {
		page = parseInt(_this.params.get('pag'));
	}
	
	var offset = eval((page * pageLength) - pageLength); // Determina o valor inicial da página atual
	var maxValue = eval(offset + pageLength); // Determina o valor máximo dos registros que serão exibidos na página atual
	
	// Caso o valor máximo seja maior que o número de registros, pega-se o total de registros, divide pelo valor máximo
	// inicialmente setado para esta página e soma com o valor inicial
	if (maxValue > training.values.length) {
		// (linha errada) maxValue = Math.ceil(totalRecords / maxValue) + offset;
		maxValue = training.values.length;
	}
	
	function paginate () {
		// Usando o mustache.js para gerar a lista de treinamentos junto com a paginação
		for (t = offset; t < maxValue; t++) {
			var template = $('#coursesList').html();
			var html = Mustache.render(template, training.values[t]);
			$('#lista-cursos').append(html);
		}
		
		for (p = 1; p <= totalPages; p++) {
			if (_this.params.get('academia') == null) {
				var number = '<li><a href="?pag='+ p +'">'+ p +'</a></li>'
			} else {
				var link = url.split('&pag=');
				
				var number = '<li><a href="'+ link[0] +'&pag='+ p +'">'+ p +'</a></li>'
			}
			
			$('.pagination').append(number);
		}
		
		if (page == 1 || _this.params.get('pag') == null) {
			$('#pag-preview').remove();
		} else {
			if (_this.params.get('academia') == null) {
				$('.pag-preview').attr('href', '?pag=' + eval(page - 1));
			} else {
				var link = url.split('&pag=');
				
				$('.pag-preview').attr('href', link[0] + '&pag=' + eval(page - 1));
			}
		}
		
		if (page != totalPages) {
			if (_this.params.get('academia') == null) {
				$('.pagination').append('<li class="page-item">' +
						'<a class="page-link pag-last" href="?pag='+ eval(page + 1) +'" aria-label="Next">' +
						'<span aria-hidden="true">&raquo;</span>' +
						'<span class="sr-only">Next</span>' +
						'</a>' +
						'</li>');
			} else {
				var link = url.split('&pag=');
				
				$('.pagination').append('<li class="page-item">' +
					'<a class="page-link pag-last" href="'+ link[0] +'&pag='+ eval(page + 1) +'" aria-label="Next">' +
					'<span aria-hidden="true">&raquo;</span>' +
					'<span class="sr-only">Next</span>' +
					'</a>' +
					'</li>');
			}
		}
	}
	
	paginate();
});

<div class="pag-nav text-center">
	<nav class="pagination-nav">
		<ul class="pagination">
			<li class="page-item" id="pag-preview">
				<a class="page-link pag-preview" aria-label="Previous">
					<span aria-hidden="true">&laquo;</span>
					<span class="sr-only">Previous</span>
				</a>
			</li>
		</ul>
	</nav>
</div>
=====

// Pega o primeiro dia e o último dia do mês.
var date = new Date();
var firstDay = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + 1;
var lastDay = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + (new Date(date.getFullYear(), date.getMonth() + 1, 0)).getDate();
=====

// Gerar um select por jquery
var $formatOption = $("<option>", {
	'value': value.formatId,
	'text': value.formatName,
	'selected': 'selected'
});

$.each(format.values, function(key, value) {
	var $formatOption = $("<option>", {
		'value': value.formatId,
		'text': value.formatName
	});
	
	$('#format').append($formatOption);
});
=====

// Obter query string via javascript
// Pega a url atual
var url = window.location.href;

// Localiza os parâmetros da url atual
var params = new URL(url).searchParams;
=====